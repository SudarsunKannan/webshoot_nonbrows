#include <stdio.h>
#include <stdlib.h>
#include "hash_map.h"

#include <unistd.h>
#include <errno.h>
#include <sys/mman.h>
#include "oswego_malloc.h"

extern void hash_insert( unsigned long key, size_t val);
extern size_t hash_find( unsigned long key);
extern void hash_delete( unsigned long key);
extern size_t find_hash_total();

size_t print_total_stats() {

	size_t total_alloc =0;

	total_alloc= find_hash_total();

	fprintf(stderr,"NVmalloc: total %zu\n",total_alloc);
	 return total_alloc;	

}


int input_id =0;
int tid = 1;
char *addr = NULL;
size_t region_size = 65536 * 3000;
int d = -1;
size_t val = 0;
size_t total_size = 0;

void *allocate_mem(size_t size) {

    int flgPersist = 1;

	total_size += size;

	//fprintf(stderr,"%d %zu\n", ++input_id, total_size );

	 // addr = (char *)nv_malloc(size);	
	 /*else	*/
	  addr = malloc(size);
	   //addr = (char *)nvmalloc(tid, ++input_id, size, flgPersit);

	/*if(!input_id) {
		d = imc_mem_obj_create(region_size);			
		addr =  mmap((void *) 0, region_size, PROT_READ|PROT_WRITE, MAP_SHARED, d, 0);
		if (MAP_FAILED == addr) {
		   fprintf(stderr, "imc_shm_mmap: mmap failed, errno\n");
		   return NULL;
		}
		input_id++;

		addr[region_size-1] = 'a';

	}else{
		input_id++;
        addr = addr + size;
	}*/

	/*addr =  mmap((void *) 0, size, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, -1, 0);
     if (MAP_FAILED == addr) {
         fprintf(stderr, "imc_shm_mmap: mmap failed, errno\n");
         return NULL;
     }*/


    if(!addr){
        fprintf(stderr,"NVmalloc allocation failed \n");
        return NULL;
    }else{
		hash_insert((unsigned long)addr, size);
    }
	//fprintf(stderr,"%lu\n",(unsigned long)addr);
    return addr;
}


void *nvcalloc(size_t nelemnts, size_t elemnt_sz) {

    int flgPersist = 0;

    total_size += nelemnts* elemnt_sz;
    ++input_id;

    //fprintf(stderr,"%zu\n",total_size );
    //addr = nv_malloc(size);

//#ifdef USE_NVMALLOC    
    //addr = nv_calloc(nelemnts, elemnt_sz);
//#else
    addr = calloc(nelemnts, elemnt_sz);
//#endif

    if(!addr){
        fprintf(stderr,"nvcalloc allocation failed \n");
        return NULL;
    }else{
        hash_insert((unsigned long)addr, nelemnts* elemnt_sz);
    }
    //fprintf(stderr,"returning address %lu \n",(unsigned long)addr);
    return addr;
}




void *nvrealloc(void *orig_ptr,  size_t size) {

    unsigned long addr;
	void *new_ptr = NULL;
	void *temp_mem = NULL;
    size_t oldsize;

	addr = (unsigned long)orig_ptr;

    if(!addr){
        fprintf(stderr,"NVmalloc reallocation failed \n");
        return NULL;
    }/*else{

		oldsize = hash_find(addr);
		fprintf(stderr, "found oldsize %zu \n", oldsize);

		if(oldsize) {

			fprintf(stderr, "found oldsize %zu, new size %zu\n",oldsize, size);

			if( addr == (unsigned long)new_ptr) {

				hash_insert(addr, size);
			}else {
	
				hash_delete(addr);
				hash_insert((unsigned long)new_ptr, size);
			}
			temp_mem = nv_malloc(size);
            memcpy(temp_mem, orig_ptr, oldsize);
			new_ptr = temp_mem;

		}else{

			new_ptr = nv_malloc(size);
			hash_insert((unsigned long)new_ptr, size);
		}
    }*/
    fprintf(stderr,"calling nvrealloc \n");
	new_ptr = realloc(orig_ptr, size);
    return new_ptr;
}

void nv_free(void *addr) {

	//nvfree(addr);

}

